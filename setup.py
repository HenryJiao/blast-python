# BEGIN_COPYRIGHT
# 
# Copyright (C) 2014 CRS4.
# 
# This file is part of blast-python.
# 
# blast-python is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# blast-python is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# blast-python.  If not, see <http://www.gnu.org/licenses/>.
# 
# END_COPYRIGHT
import os, re, warnings
from distutils.core import setup, Extension
from distutils.command.build_py import build_py as du_build_py
from distutils.errors import DistutilsSetupError


NCBI_INCLUDE = os.getenv("NCBI_INCLUDE", "/usr/include/ncbi-tools++")
NCBI_LIB = os.getenv("NCBI_LIB", "/usr/lib/ncbi-tools++")

EXPECTED_NCBI_TOOLKIT_VERSION = '20100418'
try:
  with open("VERSION") as f:
    VERSION = f.read().strip()
except IOError:
  raise DistutilsSetupError("failed to read version info")


mtime = lambda fn: os.stat(fn).st_mtime


# ncbi_toolkit_main: auto-generated in original Makefile
cpp_names = ["blast_options", "blast_sseq", "blast_sseq_factories",
             "blast_blast2seq", "blast_diagnostics", "blast_hits",
             "blast_sseq_loc_from_fasta", "blast_sseq_loc_from_str",
             "cseq_sequence_extractor", "ncbi_toolkit_main"]
cpp_files = ["src/%s.cpp" % n for n in cpp_names]

include_dirs = [NCBI_INCLUDE]
library_dirs = [NCBI_LIB]


ver_file = os.path.join(NCBI_INCLUDE, 'common/ncbi_source_ver.h')
try:
  with open(ver_file) as f:
    vtext = f.read()
  v = re.search(r'NCBI_PRODUCTION_VER\s+(\d+)', vtext).groups()[0]
except (IOError, AttributeError):
  problem = "could not get NCBI toolkit version"
else:
  if v != EXPECTED_NCBI_TOOLKIT_VERSION:
    problem = "ncbi toolkit's version (%r) is not the expected one (%r)" % (
      v, EXPECTED_NCBI_TOOLKIT_VERSION)
  else:
    problem = None
if problem:
  warnings.warn(problem)


blast_libs = ["xblast", "xalgoblastdbindex", "composition_adjustment",
              "xalgodustmask", "seqdb", "xobjutil", "xobjread",
              "blast_services", "xalgowinmask", "seqmasks_io",]

other_libs = ['biblio', 'blastdb', 'dbapi_driver', 'general', 'id1', 'id2',
              'medline', 'ncbi_xloader_genbank', 'ncbi_xreader',
              'ncbi_xreader_cache', 'ncbi_xreader_id1', 'ncbi_xreader_id2',
              'pub', 'scoremat', 'seq', 'seqcode', 'seqset', 'seqsplit',
              'sequtil', 'tables', 'xcompress', 'xconnect', 'xncbi',
              'xnetblast', 'xnetblastcli', 'xobjmgr', 'xobjsimple', 'xser',
              'xutil']

libraries = ['boost_python'] + blast_libs + other_libs + ['z']

blast_core_ext = Extension("ncbi_toolkit",
                           cpp_files,
                           include_dirs=include_dirs,
                           library_dirs=library_dirs,
                           runtime_library_dirs=library_dirs,
                           libraries=libraries,
                           extra_compile_args=['-O3'])


def write_version(filename="BlastPython/version.py"):
  if os.path.exists(filename) and mtime("VERSION") <= mtime(filename):
    return
  with open(filename, "w") as f:
    f.write("# GENERATED BY setup.py\n")
    f.write("version='%s'\n" % VERSION)


class build_py(du_build_py):
  def run(self):
    write_version()
    du_build_py.run(self)


setup(name="blast-python",
      version=VERSION,
      description='Python bindings for NCBI blast',
      author='Gianluigi Zanetti',
      author_email='zag@crs4.it',
      maintainer='Simone Leo',
      maintainer_email='simleo@crs4.it',
      url='http://svn.crs4.it/blast-python/',
      packages=['BlastPython'],
      ext_modules=[blast_core_ext],
      cmdclass={"build_py": build_py},
      )
